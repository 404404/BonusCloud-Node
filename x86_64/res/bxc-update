#!/bin/bash

BASE_DIR="/opt/bcloud"

VERSION_FILE="$BASE_DIR/VERSION"
LOG_DIR="$BASE_DIR/logs"
LOG_FILE="${LOG_DIR}/bonus-check-`date '+%Y-%m-%d'`.log"
LOG_RESERVE_DAYS=5
NODE_INFO="$BASE_DIR/node.db"
SSL_CA="$BASE_DIR/ca.crt"
SSL_CRT="$BASE_DIR/client.crt"
SSL_KEY="$BASE_DIR/client.key"
REPORT_URL="https://bxcvenus.com/idb/dev"

init(){
    [ -d "$BASE_DIR" ] || mkdir -p $BASE_DIR
    [ -d "$LOG_DIR" ] || mkdir -p $LOG_DIR
    [ -f "$VERSION_FILE" ] || touch $VERSION_FILE
}

log(){
   echo "[`date '+%Y-%m-%d %H:%M:%S'`] $1" >> $LOG_FILE
}

logclear(){
    rm -f "${LOG_DIR}/bonus-check-` date -d "$LOG_RESERVE_DAYS days ago" "+%Y-%m-%d"`.log" > /dev/null
}

update(){
    curl -s -t 3 -m 5 "https://raw.githubusercontent.com/BonusCloud/BonusCloud-Node/master/img-modules/md5.txt" -o /tmp/md5.txt
    if [ ! -s /tmp/md5.txt ];then
        log "[error] curl -t 3 -m 5 \"https://raw.githubusercontent.com/BonusCloud/BonusCloud-Node/master/img-modules/md5.txt\" -o /tmp/md5.txt"
        return
    fi
    arch=`uname -m|tr '_' '-'`
    for line in `grep "$arch" /tmp/md5.txt`
    do
        git_file_name=`echo $line | awk -F: '{print $1}'`
        git_md5_val=`echo $line | awk -F: '{print $2}'`
        file_path=`echo $line | awk -F: '{print $3}'`
        start_wait=`echo $line | awk -F: '{print $4}'`
        local_md5_val=`md5sum $file_path | awk '{print $1}'`

        if [ -n "$git_md5_val" ] && [ -n "$local_md5_val" ];then
            if [ "$git_md5_val"x != "$local_md5_val"x ];then
                log "[info] $file_path md5 changed: git md5 $git_md5_val, local md5 $local_md5_val, update ..."
                curl -s -t 3 -m 300 "https://raw.githubusercontent.com/BonusCloud/BonusCloud-Node/master/img-modules/$git_file_name" -o /tmp/$git_file_name
                download_md5=`md5sum /tmp/$git_file_name | awk '{print $1}'`
                if [ "$download_md5"x != "$git_md5_val"x ];then
                    log "[error] download file /tmp/$git_file_name md5 $download_md5 different from git md5 $git_md5_val, ignore this update and continue ..."
                    continue
                else
                    log "[info] /tmp/$git_file_name download success."
                    cp -f $file_path ${file_path}.bak > /dev/null
                    cp -f /tmp/$git_file_name $file_path > /dev/null
                    chmod +x $file_path > /dev/null
                    systemctl daemon-reload
                    systemctl restart bxc-node
                    sleep $start_wait
                    isactive=`ps aux | grep -v grep | grep "$file_path" > /dev/null; echo $?`
                    if [ $isactive -ne 0 ];then
                        log "[error] $file_path start faild, rollback and restart"
                        cp -f ${file_path}.bak $file_path > /dev/null
                        systemctl restart bxc-node
                    else
                        log "[info] $file_path update success."
			rm -f ${file_path}.bak
                    fi
                fi
            else
                log "[info] $file_path is the latest version with md5 $local_md5_val"
            fi
        else
            log "[error] $git_file_name check md5 faild, git md5 '$git_md5_val' local md5 '$local_md5_val'"
            continue
        fi
    done
}

version(){
    arch=`uname -m|tr '_' '-'`
    for line in `grep "$arch" /tmp/md5.txt`
    do
        git_file_name=`echo $line | awk -F: '{print $1}'`
        git_md5_val=`echo $line | awk -F: '{print $2}'`
        file_path=`echo $line | awk -F: '{print $3}'`
        start_wait=`echo $line | awk -F: '{print $4}'`
        local_md5_val=`md5sum $file_path | awk '{print $1}'`

        if [ -n "$git_md5_val" ] && [ -n "$local_md5_val" ];then
            if [ "$git_md5_val"x != "$local_md5_val"x ];then
                log "[error] $file_path update failed: git md5 $git_md5_val, local md5 $local_md5_val, exit version report."
	        return
            fi
        else
            log "[error] $git_file_name check md5 faild, git md5 '$git_md5_val' local md5 '$local_md5_val', exit version report"
	    return
        fi
    done
    git_version=`grep "version" /tmp/md5.txt | awk -F: '{print $2}'`
    local_version=`cat $VERSION_FILE`
    if [ "$git_version"x != "$local_version"x ];then
	echo "$git_version" > $VERSION_FILE
        if [ -s $SSL_CA ] && [ -s $SSL_CRT ] && [ -s $SSL_KEY ] && [ -s $NODE_INFO ];then
	    mac=`ip addr list dev eth0 | grep "ether" | awk '{print $2}'`
	    bcode=` cat $NODE_INFO |sed 's/,/\n/g' | grep "bcode" | awk -F: '{print $NF}' | sed 's/"//g'`
	    status_code=`curl -m 5 -k --cacert $SSL_CA --cert $SSL_CRT --key $SSL_KEY -H "Content-Type: application/json" -d "{\"mac\":\"$mac\", \"info\":\"$git_version\"}" -X PUT -w "\nstatus_code:"%{http_code}"\n" "$REPORT_URL/$bcode" | grep "status_code" | awk -F: '{print $2}'`
	    if [ $status_code -eq 200 ];then
                log "[info] version $git_version reported success!"
	    else
	        log "[error] version reported failed($status_code): curl -m 5 -k --cacert $SSL_CA --cert $SSL_CRT --key $SSL_KEY -H \"Content-Type: application/json\" -d \"{\"mac\":\"$mac\", \"info\":\"$git_version\",}\" -X PUT -w \"\nstatus_code:\"%{http_code}\"\n\" \"$REPORT_URL/$bcode\""
	    fi
        else
	    log "[error] ssl file or node.db file not found, ignore to report verison."
        fi
    fi
}

init
logclear

sleep `expr $RANDOM / 10`
update
version
